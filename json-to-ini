#!/usr/bin/python3

import argparse
from pathlib import Path
import json
    
INI_SECTION="[{}]\n"
INI_LINE="{}={}\n"
global check


def smush(output, object_to_process: dict):
    for k,v in object_to_process.items():
        match type(v).__name__:
            case 'dict':
                output.write(INI_SECTION.format(k))
                smush(output,v)
            case 'list':
                output.write(INI_SECTION.format(k))
                if len(v) != 0:
                    
                    if isinstance(v[0],dict):
                        for item in v:
                            smush(output,item)
                        continue

                    n = 0
                    for item in v:
                        key = k + "-" + str(n)
                        smush(output,{key:item})
                        n+=1
            case _:
                output.write(INI_LINE.format(k,v))

def main(file_path):
    
    input = Path(file_path)
    
    if not input.exists():
        eprint("File not found")
        exit(66)
    
    if input.is_dir():
        eprint("Directory provided. Please provide file.")
        exit(66)

    try:
        json_object = json.loads(input.read_text())
    except JSONDecodeError:
        eprint("Invalid JSON file")
        exit(65)

    output = open(input.stem + ".ini","+w")
    if args.section:
        output.write(INI_SECTION.format(args.section))
    #if line is flat
    smush(output, json_object)

    return

if __name__ == '__main__':
    global check
    check = 0
    parser = argparse.ArgumentParser(prog='json-to-ini',description='Takes a json. Spits out an ini',epilog='See readme for further details.')
    parser.add_argument('-f','--file', help='Path to file',required=True)
    parser.add_argument('-s','--section', help='Name of top level INI section')
    args = parser.parse_args()
    main(args.file)